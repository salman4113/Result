import pandas as pd
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Spacer, Paragraph
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib import colors
import os

# --- Configuration ---
SCHOOL_NAME = "Your School Name Here" # Replace with your school name
EXCEL_FILE_PATH = "student_results.xlsx" # Name of your Excel file
OUTPUT_FOLDER = "result_cards" # Folder to save the PDF files
MAX_MARKS_PER_SUBJECT = 100 # Assuming each subject has a max of 100 marks

# Define grading scale
def get_grade(percentage):
    if percentage >= 90:
        return "A+"
    elif percentage >= 80:
        return "A"
    elif percentage >= 70:
        return "B"
    elif percentage >= 60:
        return "C"
    elif percentage >= 50:
        return "D"
    else:
        return "F"

# --- PDF Generation Function ---
def generate_result_card(student_data):
    """Generates a PDF result card for a single student."""

    student_name = student_data['Student Name']
    roll_number = student_data['Roll Number']
    class_name = student_data['Class Name']

    # Get subject marks (excluding the first three columns)
    subject_marks = student_data.drop(['Student Name', 'Roll Number', 'Class Name']).to_dict()

    # Calculate total marks and percentage
    total_marks_obtained = sum(subject_marks.values())
    num_subjects = len(subject_marks)
    max_total_marks = num_subjects * MAX_MARKS_PER_SUBJECT
    percentage = (total_marks_obtained / max_total_marks) * 100 if max_total_marks > 0 else 0
    grade = get_grade(percentage)

    # Create output folder if it doesn't exist
    if not os.path.exists(OUTPUT_FOLDER):
        os.makedirs(OUTPUT_FOLDER)

    # Define PDF file name
    pdf_filename = os.path.join(OUTPUT_FOLDER, f"{student_name.replace(' ', '_')}_Result_Card.pdf")

    # Create a PDF document
    doc = SimpleDocTemplate(pdf_filename, pagesize=letter)
    story = []
    styles = getSampleStyleSheet()

    # Add School Name and Title
    school_style = ParagraphStyle(name='SchoolName', parent=styles['h1'], alignment=1, spaceAfter=10)
    title_style = ParagraphStyle(name='Title', parent=styles['h2'], alignment=1, spaceAfter=20)
    story.append(Paragraph(SCHOOL_NAME, school_style))
    story.append(Paragraph("Academic Result Card", title_style))

    # Add Student Details
    details_style = ParagraphStyle(name='Details', parent=styles['Normal'], spaceAfter=10)
    story.append(Paragraph(f"<b>Student Name:</b> {student_name}", details_style))
    story.append(Paragraph(f"<b>Roll Number:</b> {roll_number}", details_style))
    story.append(Paragraph(f"<b>Class:</b> {class_name}", details_style))
    story.append(Spacer(1, 12))

    # Add Marks Table
    table_data = [['Subject', 'Marks Obtained', 'Max Marks']]
    for subject, marks in subject_marks.items():
        table_data.append([subject, marks, MAX_MARKS_PER_SUBJECT])

    table_style = TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('BOX', (0, 0), (-1, -1), 1, colors.black),
    ])

    marks_table = Table(table_data)
    marks_table.setStyle(table_style)
    story.append(marks_table)
    story.append(Spacer(1, 20))

    # Add Total, Percentage, and Grade
    summary_style = ParagraphStyle(name='Summary', parent=styles['Normal'], spaceAfter=8)
    story.append(Paragraph(f"<b>Total Marks Obtained:</b> {total_marks_obtained} / {max_total_marks}", summary_style))
    story.append(Paragraph(f"<b>Percentage:</b> {percentage:.2f}%", summary_style))
    story.append(Paragraph(f"<b>Grade:</b> {grade}", summary_style))

    # Build the PDF
    doc.build(story)
    print(f"Generated result card for {student_name} at {pdf_filename}")

# --- Main Execution ---
if __name__ == "__main__":
    try:
        # Read data from Excel
        df = pd.read_excel(EXCEL_FILE_PATH)

        # Iterate through each student row and generate PDF
        for index, row in df.iterrows():
            generate_result_card(row)

        print("\nResult card generation complete.")

    except FileNotFoundError:
        print(f"Error: The Excel file '{EXCEL_FILE_PATH}' was not found.")
        print("Please make sure the Excel file is in the same directory as the Python script.")
    except Exception as e:
        print(f"An error occurred: {e}")



